---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"li"> {
	headline: string;
	image?: string;
}

const { headline, image, class: className, ...attrs } = Astro.props;
---

<li
	class={`rolodex__item | sidebar | bg-background text-foreground shadow-l6 rounded-2xl overflow-hidden ${className ? ` | ${className}` : ""}`}
	data-direction="rtl"
	{...attrs}
>
	<div class="rolodex__body | repel | p-s-m" data-direction="column">
		<h3>{headline}</h3>
		<slot />
	</div>
	{
		image ? (
			<div class="rolodex__wrap-image">
				<img src={image} alt="" />
			</div>
		) : null
	}
</li>

<style>
	/*
	[1] when the rolodex item is sticky we want to space it from the top.
	*/
	.rolodex__item {
		--grid-placement: auto-fit;
		--grid-min-item-size: clamp(12rem, 50cqi, 25rem);
		--sidebar-target-width: 25rem;
		--sidebar-content-min-width: 60%;
		min-block-size: 28rem;
		align-items: stretch;
		top: var(--spacing-gutter); /* [1] */

		/*
		Only create the "rolodex" effect when the screen and
		the container are large enough.
		1. min-block-size + m * 2
		2. 90rem = retain desk
		*/
		@media (min-height: 32.5em) {
			@container retain (inline-size >= 90rem) {
				position: sticky;
			}
		}
	}

	/*
	Images are replaced content so they behave a little different than
	regular elements. Thats why we need to position the image absolute to
	make sure it doesn't get squished and skewed.
	@TODO: check if this is still the right solution
	*/
	.rolodex__wrap-image {
		position: relative;
		aspect-ratio: 19/10;

		> img {
			position: absolute;
			inset: 0;
			inline-size: 100%;
			block-size: 100%;
			object-fit: cover;
		}
	}

	.rolodex__body {
		--repel-alignment: start;
	}
</style>
